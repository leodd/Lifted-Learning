Gaussian-MRF
[132.7130346009499, 129.4570832502701, 138.69901601253892, 97.13938538286581, 104.05086280975605, 149.46896991171874]
[15.416497000814918, 15.071379006167662, 17.533581285741715, 8.931535883724344, 9.543924089973, 19.71692518737146]
125.25472532801659 14.368973742298849

Dual-Neural-MRF
[111.10878022931162, 93.28616042060528, 100.04401614288835, 80.6961629036027, 82.20107587607183, 118.24643567273739]
[7.702484450264132, 5.584140914515352, 6.20619205557705, 5.1002710905779125, 5.077956154165042, 8.13869588356287]
97.59710520753622 6.301623424777059

[75.65113716134886, 75.96847912580472, 101.41888715590206, 91.21873614570987, 86.33741184574998, 109.32896085565092]
[4.127973143645884, 4.552564826749814, 6.296219676209293, 5.145699672979353, 4.869205883774479, 6.919249509533868]
89.98726871502775 5.318485452148781

1d Neural-MRF
[93.29437591646108, 90.19554392556265, 89.57569723670589, 77.3957673054608, 79.7485188657804, 104.21105837862211]
[6.310219671585699, 8.346970612079904, 6.117420537641333, 6.860852344911905, 5.362220664106758, 6.286146144103314]
89.07016027143216 6.547304995738152

2d Neural-MRF
[225.64303129351183, 204.44555498974083, 221.606379635964, 187.2978497102327, 200.48703507280123, 246.43236002761427]
[28.551048684793678, 24.503402834250487, 27.580574036173015, 20.81472143934902, 22.63452168530566, 31.553855560132607]
214.31870178831082 25.939687373334078

Expert specified potential
[110.43746169160887, 98.37878552174612, 103.35034731195181, 77.8417365818816, 87.1906648382527, 124.78580222594898]
[8.104165518230289, 6.532244845461237, 7.25895836785714, 4.816790509296336, 5.463095734884716, 9.597727413895111]
100.33079969523168 6.9621637316041385

Expert specified potential with specified parameters
[64.13193408156104, 65.52059014677914, 70.87036490593475, 69.07420987813312, 71.29009690825718, 82.46099152051204]
[2.51410671809475, 3.092628686159213, 3.010379017351622, 2.886281039026178, 3.1799722976163736, 3.8952259569281447]
70.5580312401962 3.0964322858627136

print(l1_loss, l2_loss)
print(np.mean(l1_loss), np.mean(l2_loss))

